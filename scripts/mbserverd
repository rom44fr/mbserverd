#!/usr/bin/perl -w

# Server Modbus/TCP multi-client
#     Version: 1.6.1
#     Website: https://github.com/sourceperl/mbserverd
#        Date: 03/12/2015
#     License: MIT
# Description: Server Modbus/TCP multi-threaded 
#              function build-in: 3, 4, 6 and 16
#       Notes: - The script uses the share memory mechanism provides by IPC 
#              System V for data exchange between each process (a process for
#              each TCP link and one father)
#              - Open TCP port 502 in listening mode requires privileged "root"

use strict;
use Sys::Syslog;
use POSIX;
use Socket;
use IPC::SysV qw(IPC_RMID IPC_PRIVATE); # share mem !!! OS Unix only

# constant
our $VERSION            = '1.6.1';
my  $MBSERVERD_USAGE    =
'usage : mbserverd [-hvn] [-p port]

command line :
  -h                    : show this help message
  -v                    : show version
  -n                    : run mbserverd in the foreground (no daemonize)
  -p port_number        : set TCP port (default 502)';
# syslog
my $SYSLOG_NAME              = 'mbserverd';
# pid file
my $PID_FILE                 = '/var/run/mbserverd.pid';
# ModBus/TCP value
my $MODBUS_PORT              = 502;
# protocol ID (field of modbus/TCP header)
my $MODBUS_PROTOCOL_ID       = 0;
# functions codes
my $READ_HOLDING_REGISTERS   = 0x03;
my $READ_INPUT_REGISTERS     = 0x04;
my $WRITE_SINGLE_REGISTER    = 0x06;
my $WRITE_MULTIPLE_REGISTERS = 0x10;
# excepts codes
my $EXP_NO_EXCEPTION         = 0x00;
my $EXP_ILLEGAL_FUNCTION     = 0x01;
my $EXP_DATA_ADDRESS         = 0x02;
my $EXP_DATA_VALUE           = 0x03;
# constant
my $IPPROTO_TCP              = 0x06;
my $TCP_NODELAY              = 0x01;

# default value
my $opt_modbus_port          = $MODBUS_PORT;
my $opt_daemonize            = 1;

# share memory info
my $shm_flags   = 0666;     # shm flag rw-rw-rw-
my $shm_size    = 65536*2;  # size of share mem
# allocate share mem
my $sid = shmget(IPC_PRIVATE, $shm_size, $shm_flags);

# auto-flush STDOUT and STDERR (need for use with supervisor tail command)
select(STDERR);
$| = 1;
select(STDOUT);
$| = 1;

# parse command line args
while(defined($_ = shift @ARGV)) {
  /^-h$/   and do {print $MBSERVERD_USAGE."\n"; exit 0;};
  /^-v$/   and do {print 'version: '.$VERSION."\n"; exit 0;};
  /^-n$/   and do {$opt_daemonize = 0;};
  ## tcp port
  /^-p$/ and do {
    $_ = shift @ARGV;
    if ((/^\d{1,5}$/) && ($_ <= 65535) && ($_ > 0)) {
      $opt_modbus_port = $_; next;
    } elsif ((/^0x[a-fA-F0-9]{1,4}$/) && (hex($_) > 0)) {
      $opt_modbus_port = hex($_); next;
    } else {
      print STDERR 'option "-p": 1 <= port_number <= 65535.'."\n";
      exit 1;
    }
  };
}

# check user : must be start by root to listen on tcp port < 1024
if ($> != 0 and $opt_modbus_port < 1024) {
  printf STDERR "modbus server must be run by root for bind port < 1024\n";
  log_mesg('modbus server must be run by root for bind port < 1024, exit');
  exit 1;
}

# startup message
log_mesg("modbus server started");

# daemonize
if($opt_daemonize) {
  # daemonize (call exit for process father)
  exit 0 if  !(fork == 0);
  # current process is process group leader (main daemon)
  setpgrp(0, 0);
  # create default PID_FILE for root user and daemonize mode
  if ($> == 0) {
    # create default PID file
    open (PID, ">$PID_FILE");
    print PID "$$\n";
    close PID;
  }
}

# signals setup
$SIG{TERM} = \&father_exit_handler;

sub father_exit_handler {
  # for the father process...
  # del PID file
  if ($opt_daemonize and ($> == 0)) {
    unlink $PID_FILE;
  }
  # free share memory
  shmctl ($sid, IPC_RMID, 0); 
  # restore default CHLD handler
  $SIG{CHLD} = 'DEFAULT';
  # kill childs process (on same process group)
  local $SIG{TERM} = 'IGNORE'; # avoid deep recursion
  kill 'TERM', -$$;
  # wait end of every childs
  while (wait != -1) {}
  # close socket
  exit 0;
};

sub child_exit_handler {
  # for the child process...
  exit 0;
}

# for remove child zombie process
$SIG{CHLD} = 'IGNORE';

# setup protocol
my $proto = getprotobyname('tcp');

# open modbus/TCP port in listen mode
socket(Server, PF_INET, SOCK_STREAM, $proto);
setsockopt(Server, SOL_SOCKET, SO_REUSEADDR, 1) or die "setsockopt error $!\n";
setsockopt(Server, SOL_SOCKET, SO_KEEPALIVE, 1) or die "setsockopt error $!\n";
setsockopt(Server, $IPPROTO_TCP, $TCP_NODELAY, 1)
  or die "setsockopt error $!\n";
bind (Server, sockaddr_in($opt_modbus_port, INADDR_ANY))
  or die "bind port error $opt_modbus_port\n";
listen (Server, SOMAXCONN) or die "listen: $!";
my $paddr;
# connection loop
CLIENT_ACCEPT:
while($paddr = accept(Client, Server)) {
  # make a fork for every new connection
  my $pid_child;
  if ($pid_child = fork) {
    # father close handle and go wait next connection
    close Client;
    next CLIENT_ACCEPT;
  } else {
    # set child process SIGTERM handle
    $SIG{TERM} = \&child_exit_handler;
  }
  defined($pid_child) or die "unable to fork : $!";
  # child close unused handle
  close Server;
  my ($client_port, $client_addr) = sockaddr_in($paddr);
  my ($head_tr_id, $head_pr_id, $head_length);
  my ($unit_id, $mb_fc, $bc, $ref, $count, $data, @data, $line, $header, $sent,
      $frame, $value);
  # client msg loop
  while(1) {
    # read 7 bytes header (transaction identifier, protocol identifier, length,
    # unit id)
    recv Client, $line, 7, MSG_WAITALL;
    # if TCP link is close
    if (length($line) != 7) {
      # free socket and end of child process
      close Client;
      exit;
    }
    ($head_tr_id, $head_pr_id, $head_length, $unit_id) = unpack "nnnC", $line;
    # check header
    if ($head_pr_id != $MODBUS_PROTOCOL_ID) {
      # free socket and end of child process
      close Client;
      exit;
    }
    # read frame body
    recv Client, $line, $head_length-1, MSG_WAITALL;
    # if TCP link is close
    if (length($line) == 0) {
      # free socket and end of child process
      close Client;
      exit;
    }
    # decode function code and unit id
    ($mb_fc, $line) = unpack "Ca*", $line;
    # init except var
    my $exp_status = $EXP_NO_EXCEPTION;
    # for every function code
    if ( ($mb_fc == $READ_HOLDING_REGISTERS) || 
         ($mb_fc == $READ_INPUT_REGISTERS) ) {
      # read some words
      ($ref, $count) = unpack "nn", $line;
      if (($count <= 127) && (shmread $sid, $line, 2*$ref, 2*$count)) {
        $line = pack('n*', unpack 'S*', $line);
        $header = pack 'nnnCCC', $head_tr_id, $head_pr_id, 2*$count+3, $unit_id,
                                 $mb_fc, 2*$count;
        $frame = $header . $line;
      } else {
        $exp_status = $EXP_DATA_ADDRESS;
      }
    } elsif ( $mb_fc == $WRITE_SINGLE_REGISTER ) {
      # write a word
      ($ref, $value) = unpack "nn", $line;
      if (shmwrite ($sid, pack ('S', $value), 2*$ref, 2)) {
        $frame = pack 'nnnCCnn', $head_tr_id, $head_pr_id, 6, $unit_id, $mb_fc,
                                 $ref, $value;
      } else {
        $exp_status = $EXP_DATA_ADDRESS;
      }
    } elsif ( $mb_fc == $WRITE_MULTIPLE_REGISTERS ) {
      # write words
      ($ref, $count, $bc, @data) = unpack 'nnCn*', $line;
      if (shmwrite ($sid, pack ('S*', @data), 2*$ref, 2*$count)) {
        $frame = pack 'nnnCCnn', $head_tr_id, $head_pr_id, 6, $unit_id, $mb_fc,
                                 $ref, $count;
      } else {
        $exp_status = $EXP_DATA_ADDRESS;
      }
    } else {
      # for unknown function code
      $exp_status = $EXP_ILLEGAL_FUNCTION;
    }
    # if except : build except frame
    if ($exp_status != $EXP_NO_EXCEPTION) {
      $frame = pack 'nnnCCC', $head_tr_id, $head_pr_id, 3, $unit_id,
                              $mb_fc + 0x80, $exp_status;
    }
    # send answer
    send(Client, $frame, 0);
  } # end of msg loop
} # end of connect loop
# *** add for $SIG{CHLD} bug ***
#goto CLIENT_ACCEPT;
# ********************************************

# *** misc sub ***

# log_mesg(mesg) write mesg on syslog
sub log_mesg {
  my ($mesg) = @_;
  openlog($SYSLOG_NAME, 'ndelay', 'daemon');
  syslog('notice', $mesg);
  closelog();
}
